// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RastafarWebApp.Data;

#nullable disable

namespace HiparAppData.Migrations
{
    [DbContext(typeof(RastafarContext))]
    [Migration("20230811103702_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HiparAppData.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "faea5eb5-a96a-4472-b6d1-5ee8a6bff7dd",
                            AccessFailedCount = 0,
                            Age = 16,
                            ConcurrencyStamp = "6bcf315e-2704-4931-babb-a25b9225f2ce",
                            Email = "embakks@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Emil",
                            LastName = "Savov",
                            LockoutEnabled = false,
                            NormalizedEmail = "embakks@gmail.com",
                            NormalizedUserName = "embakks@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEO3DQ/e9lD+lYoEUEy+8hNatMskflww8Q6oLUbAvEtv3nztpOvOm4gXVbt/joTCOKQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d481796-92e7-4105-9902-c4373ab74d4c",
                            TwoFactorEnabled = false,
                            UserName = "Car Hipar"
                        },
                        new
                        {
                            Id = "9db8608b-f8f5-4646-8a9f-e5a5f3441a90",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "298fc5e9-ac50-49aa-88b3-fbca329def49",
                            Email = "testuser@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Test",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "testuser@gmail.com",
                            NormalizedUserName = "testuser@gmail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAECbN1cxCD793XPbf+as7IkG3mAjaWrXYGeHRIQ3wIFU1Z+A/99Nj/TF2XJA5Ht14YQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b72a8cd4-3e1e-4454-a2bf-880880529ac6",
                            TwoFactorEnabled = false,
                            UserName = "testuser@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7970acc2-5e9e-4d34-8fc5-5a62033769d3",
                            ConcurrencyStamp = "245d84ba-01f3-41aa-bf87-a74590a5bf32",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "faea5eb5-a96a-4472-b6d1-5ee8a6bff7dd",
                            RoleId = "7970acc2-5e9e-4d34-8fc5-5a62033769d3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Camps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c01fff6-f87e-45a3-a581-76843b7dfd7d"),
                            CountryId = new Guid("9b391e9c-be11-4338-96f3-95e8f78f2fbf"),
                            Image = "https://camping-gradina-sozopol.booked.net/data/Photos/OriginalPhoto/8480/848032/848032307/Camping-Gradina-Hotel-Sozopol-Exterior.JPEG",
                            Name = "Gradina"
                        },
                        new
                        {
                            Id = new Guid("369125c5-d950-4929-9e78-ca4f4bd84da8"),
                            CountryId = new Guid("6e7cd032-2e6d-4416-9148-d745153b1045"),
                            Image = "https://clubvertical.net/wp-content/uploads/2022/05/20545293_1675421585825456_6037428918988778764_o.jpg",
                            Name = "Saravari"
                        },
                        new
                        {
                            Id = new Guid("84228ed4-53d4-4b48-a328-bab8ef3b37da"),
                            CountryId = new Guid("2113bc8d-3132-4150-81bf-e7563d75591a"),
                            Image = "https://www.karavanhayati.com/wp-content/uploads/2021/03/bozcaada-karavan-kamp-alanlari-3.jpg",
                            Name = "Bozcaada"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32c96ed8-9b95-485a-9f9f-235a360509ef"),
                            Name = "Tent"
                        },
                        new
                        {
                            Id = new Guid("78d36457-fce2-4df9-afe7-5eb5f5443b66"),
                            Name = "Hammok"
                        },
                        new
                        {
                            Id = new Guid("ac159412-ddd4-4d4f-840f-6a6eda68d119"),
                            Name = "Caravan"
                        },
                        new
                        {
                            Id = new Guid("bbe79e8a-016f-4c05-8bbc-5c6b39509783"),
                            Name = "Camper"
                        },
                        new
                        {
                            Id = new Guid("2c3a03fe-c6d1-4c72-aafa-511ae5915cd2"),
                            Name = "Bungalow"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b391e9c-be11-4338-96f3-95e8f78f2fbf"),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("6e7cd032-2e6d-4416-9148-d745153b1045"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("2113bc8d-3132-4150-81bf-e7563d75591a"),
                            Name = "Turkey"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6842067d-3fb6-4d90-b419-8844cb9e30cc"),
                            CreatedOn = new DateTime(2023, 8, 11, 13, 37, 2, 25, DateTimeKind.Local).AddTicks(8267),
                            Description = "Perfect Hammok for the summer and wild camping or just to put it in the yard to chill.",
                            ImgUrl = "https://www.hammockuniverse.com/cdn/shop/articles/Hammock-Universe-Blog-Featured-Image-YOUR-ULTIMATE-GUIDE-ON-HANGING-HAMMOCKS-OUTDOORS_1600x.jpg?v=1678807426",
                            Name = "Summar Hammok",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = new Guid("57d7bbdb-bff9-4be2-9182-507056abaaf3"),
                            CreatedOn = new DateTime(2023, 8, 11, 13, 37, 2, 25, DateTimeKind.Local).AddTicks(8291),
                            Description = "Perfect cup for campers. Just sit, take a sip and enjoy your trip. Perfect for all types of adventurers",
                            ImgUrl = "https://i.etsystatic.com/8120420/r/il/2b9ef1/2889698655/il_570xN.2889698655_6kgg.jpg",
                            Name = "Camping Cup",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = new Guid("699a58ed-58be-4151-9201-74706ad2b67e"),
                            CreatedOn = new DateTime(2023, 8, 11, 13, 37, 2, 25, DateTimeKind.Local).AddTicks(8302),
                            Description = "Pocket Ashtray for wild smokers. Dont be dirty, get one of our pocket ashtray's and leave your done cigaretes there. Save nature!!!",
                            ImgUrl = "https://i5.walmartimages.com/asr/54a3ba02-3177-4aac-82dd-a6462dfb8d6a.7ece51e52d3dffaf8c8582c0c60c327d.jpeg?odnHeight=2000&odnWidth=2000&odnBg=ffffff",
                            Name = "Pocket Ashtray",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("476c562e-a630-4f7b-87c0-2b775cdd3240"),
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("1a88991b-7b58-40da-82f9-e7e15b050a9e"),
                            Name = "Train"
                        },
                        new
                        {
                            Id = new Guid("c212fbb1-c2cd-4243-97c8-0f33e3031eb1"),
                            Name = "Bus"
                        },
                        new
                        {
                            Id = new Guid("a2f4b0e2-f39a-4d85-af38-bc59f3072906"),
                            Name = "Plain"
                        },
                        new
                        {
                            Id = new Guid("93c06ff5-de99-462f-b2b1-5c4f4c1d4cd6"),
                            Name = "Share Travel"
                        });
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("UsersPosts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgsUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TravelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.HasIndex("CampTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TravelTypeId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a3b8320-2d42-4513-b3e9-f1f8d04aae3b"),
                            CampTypeId = new Guid("32c96ed8-9b95-485a-9f9f-235a360509ef"),
                            CreatedOn = new DateTime(2023, 8, 11, 13, 37, 2, 25, DateTimeKind.Local).AddTicks(7602),
                            Description = "We are going to camp in the forest next to beach Butamqta in Sinemorec",
                            Destination = "Sinemorec",
                            ImgsUrl = "https://i.pinimg.com/originals/48/65/2a/48652a144669c357866fbb75299e95ce.jpg",
                            Name = "Camping in Sinemorets",
                            OwnerId = "faea5eb5-a96a-4472-b6d1-5ee8a6bff7dd",
                            TravelTypeId = new Guid("476c562e-a630-4f7b-87c0-2b775cdd3240")
                        },
                        new
                        {
                            Id = new Guid("9a2a3f1f-f878-41d7-8dda-68d779281da9"),
                            CampTypeId = new Guid("ac159412-ddd4-4d4f-840f-6a6eda68d119"),
                            CreatedOn = new DateTime(2023, 8, 11, 13, 37, 2, 25, DateTimeKind.Local).AddTicks(7745),
                            Description = "We are going to camp on the beach in one of the biggest camps in bulgaria.",
                            Destination = "Gradina",
                            ImgsUrl = "https://camping.bg/root/f/gallery/1/c01db28c234b15fe958af37bedb1b67c.jpg",
                            Name = "Campers and chill in Gradina",
                            OwnerId = "faea5eb5-a96a-4472-b6d1-5ee8a6bff7dd",
                            TravelTypeId = new Guid("a2f4b0e2-f39a-4d85-af38-bc59f3072906")
                        },
                        new
                        {
                            Id = new Guid("021363a8-5264-4b07-975f-72da77cf1e8a"),
                            CampTypeId = new Guid("bbe79e8a-016f-4c05-8bbc-5c6b39509783"),
                            CreatedOn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "We are going to travel and camp from Varna to Burgas then to Sozopol, Carevo and Ahtopol",
                            Destination = "BlackSea",
                            ImgsUrl = "https://www.racq.com.au/-/media/project/racqgroup/racq/articles/rvs/2018/10/campervan-on-beach.jpg?h=667&iar=0&w=1000&rev=95fea142fe794fb0b6c98c2f8312e097&hash=E8405B2E92C7EFE24947186EEF7DE597",
                            Name = "Travel trough black sea",
                            OwnerId = "9db8608b-f8f5-4646-8a9f-e5a5f3441a90",
                            TravelTypeId = new Guid("a2f4b0e2-f39a-4d85-af38-bc59f3072906")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Country", "Country")
                        .WithMany("Camps")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarWebApp.Data.Models.Post", "Post")
                        .WithMany("Participants")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Camp", "Camp")
                        .WithMany("Posts")
                        .HasForeignKey("CampId");

                    b.HasOne("RastafarAppData.Data.Models.CampType", "CampType")
                        .WithMany("Posts")
                        .HasForeignKey("CampTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarAppData.Data.Models.TravelType", "TravelType")
                        .WithMany("Posts")
                        .HasForeignKey("TravelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");

                    b.Navigation("CampType");

                    b.Navigation("Owner");

                    b.Navigation("TravelType");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
