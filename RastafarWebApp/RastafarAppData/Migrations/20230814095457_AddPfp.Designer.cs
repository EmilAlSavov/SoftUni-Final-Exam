// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RastafarWebApp.Data;

#nullable disable

namespace HiparAppData.Migrations
{
    [DbContext(typeof(RastafarContext))]
    [Migration("20230814095457_AddPfp")]
    partial class AddPfp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HiparAppData.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f2734046-9c38-4662-8f40-7dfd812cc952",
                            AccessFailedCount = 0,
                            Age = 16,
                            ConcurrencyStamp = "1934f773-96bf-4881-b6cf-cd0ec51b6f16",
                            Email = "embakks@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Emil",
                            Image = "https://z-p3-scontent.fskg1-1.fna.fbcdn.net/v/t1.15752-9/367483380_254225674190931_6660571953597606357_n.jpg?_nc_cat=108&cb=99be929b-59f725be&ccb=1-7&_nc_sid=510075&_nc_ohc=cP_4NBUNEWAAX-f4BEl&_nc_ht=z-p3-scontent.fskg1-1.fna&oh=03_AdTtHrrDehU39JJDnP0CJ3F9l2R7BiAANbI1pZok2mxZ5A&oe=65016CAA",
                            LastName = "Savov",
                            LockoutEnabled = false,
                            NormalizedEmail = "embakks@gmail.com",
                            NormalizedUserName = "CAR HIPAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEP0trkfpCLtTn5chK7my/yAgjQDq8K9uhmmLip6EYm6/i84P6IBCNzvFUacYww98dQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48ff2e41-0691-4057-8ba9-e69bb6c0e2a2",
                            TwoFactorEnabled = false,
                            UserName = "Car Hipar"
                        },
                        new
                        {
                            Id = "c7558577-d640-43d7-b814-0a52b9d43c4e",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "47c1ee8d-f3eb-43b4-98b4-933845cd96f0",
                            Email = "testuser@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Test",
                            Image = "https://scontent.xx.fbcdn.net/v/t1.15752-9/367410880_248954934732977_4076882259522423148_n.jpg?stp=dst-jpg_p180x540&_nc_cat=101&cb=99be929b-59f725be&ccb=1-7&_nc_sid=510075&_nc_ohc=7QXwtqRoJUMAX8SULHh&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.xx&oh=03_AdRDfvnD_b7noUC6HzF2v4kUmCYjtJdBnrSOKFd_j0bnJg&oe=65016737",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "testuser@gmail.com",
                            NormalizedUserName = "TESTUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ/JmcsWKqzh3lVPGJUltm4rHro78yoKF95mEbXKrGC9Y4ZfAKNmBATF6tt3iEuzwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2973c32-1792-48ae-b789-cf430c032c4f",
                            TwoFactorEnabled = false,
                            UserName = "testuser@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "be7e6558-3066-4712-99b6-c0ef2874fb5b",
                            ConcurrencyStamp = "dcea5102-ecec-4023-8e92-a53c1d11a563",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f2734046-9c38-4662-8f40-7dfd812cc952",
                            RoleId = "be7e6558-3066-4712-99b6-c0ef2874fb5b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Camps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1188a350-857b-46d5-8add-727da30e994d"),
                            CountryId = new Guid("fcaf158a-b6a2-42f3-b914-4f945458ee5c"),
                            Image = "https://camping-gradina-sozopol.booked.net/data/Photos/OriginalPhoto/8480/848032/848032307/Camping-Gradina-Hotel-Sozopol-Exterior.JPEG",
                            Name = "Gradina"
                        },
                        new
                        {
                            Id = new Guid("ecdc867e-3e4c-4aa2-b23f-e30b028fb389"),
                            CountryId = new Guid("a2aca492-b059-4dc4-b491-3d1cb0fa1a22"),
                            Image = "https://clubvertical.net/wp-content/uploads/2022/05/20545293_1675421585825456_6037428918988778764_o.jpg",
                            Name = "Saravari"
                        },
                        new
                        {
                            Id = new Guid("0463c3e2-3b96-4c69-8068-134d73a7375c"),
                            CountryId = new Guid("9450ad29-1f53-469b-974a-c884510d0b75"),
                            Image = "https://www.karavanhayati.com/wp-content/uploads/2021/03/bozcaada-karavan-kamp-alanlari-3.jpg",
                            Name = "Bozcaada"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9a8f6e5-cf1c-4fcd-bf2d-ed282efe5beb"),
                            Name = "Tent"
                        },
                        new
                        {
                            Id = new Guid("b9d7ae9a-0202-4864-872f-7d74fcd611ea"),
                            Name = "Hammok"
                        },
                        new
                        {
                            Id = new Guid("d8214d0f-de2e-46f5-8810-9926cee480c0"),
                            Name = "Caravan"
                        },
                        new
                        {
                            Id = new Guid("52b6109d-cfca-418b-ba81-c795cd300aac"),
                            Name = "Camper"
                        },
                        new
                        {
                            Id = new Guid("65ed6313-e4f4-4639-937d-e1484f1bf7c5"),
                            Name = "Bungalow"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fcaf158a-b6a2-42f3-b914-4f945458ee5c"),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("a2aca492-b059-4dc4-b491-3d1cb0fa1a22"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("9450ad29-1f53-469b-974a-c884510d0b75"),
                            Name = "Turkey"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cc8f671-0bbb-407d-bf76-653aa8ddbae6"),
                            CreatedOn = new DateTime(2023, 8, 14, 12, 54, 56, 842, DateTimeKind.Local).AddTicks(2383),
                            Description = "Perfect Hammok for the summer and wild camping or just to put it in the yard to chill.",
                            ImgUrl = "https://www.hammockuniverse.com/cdn/shop/articles/Hammock-Universe-Blog-Featured-Image-YOUR-ULTIMATE-GUIDE-ON-HANGING-HAMMOCKS-OUTDOORS_1600x.jpg?v=1678807426",
                            Name = "Summar Hammok",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = new Guid("3d6b4ded-27c9-42af-acb0-ff986188e844"),
                            CreatedOn = new DateTime(2023, 8, 14, 12, 54, 56, 842, DateTimeKind.Local).AddTicks(2404),
                            Description = "Perfect cup for campers. Just sit, take a sip and enjoy your trip. Perfect for all types of adventurers",
                            ImgUrl = "https://i.etsystatic.com/8120420/r/il/2b9ef1/2889698655/il_570xN.2889698655_6kgg.jpg",
                            Name = "Camping Cup",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = new Guid("2c77cc93-7dbc-4c71-9610-e27f84587018"),
                            CreatedOn = new DateTime(2023, 8, 14, 12, 54, 56, 842, DateTimeKind.Local).AddTicks(2415),
                            Description = "Pocket Ashtray for wild smokers. Dont be dirty, get one of our pocket ashtray's and leave your done cigaretes there. Save nature!!!",
                            ImgUrl = "https://i5.walmartimages.com/asr/54a3ba02-3177-4aac-82dd-a6462dfb8d6a.7ece51e52d3dffaf8c8582c0c60c327d.jpeg?odnHeight=2000&odnWidth=2000&odnBg=ffffff",
                            Name = "Pocket Ashtray",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db413e51-e7d3-4d1c-a62b-82ca270c6e72"),
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("1fc6aced-0e62-471e-b0c7-eebce6a88254"),
                            Name = "Train"
                        },
                        new
                        {
                            Id = new Guid("9c0d96db-ae7c-4663-962e-f939ce7a5104"),
                            Name = "Bus"
                        },
                        new
                        {
                            Id = new Guid("7ce26a89-4c65-4da6-a3cb-9d6856cd423e"),
                            Name = "Plain"
                        },
                        new
                        {
                            Id = new Guid("9966050c-55ac-44ca-96cb-90511cc3323e"),
                            Name = "Share Travel"
                        });
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("UsersPosts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgsUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TravelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.HasIndex("CampTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TravelTypeId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9af35aa-9e44-4a6d-a131-0d68eb7c6914"),
                            CampTypeId = new Guid("c9a8f6e5-cf1c-4fcd-bf2d-ed282efe5beb"),
                            CreatedOn = new DateTime(2023, 8, 14, 12, 54, 56, 842, DateTimeKind.Local).AddTicks(1878),
                            Description = "We are going to camp in the forest next to beach Butamqta in Sinemorec",
                            Destination = "Sinemorec",
                            ImgsUrl = "https://i.pinimg.com/originals/48/65/2a/48652a144669c357866fbb75299e95ce.jpg",
                            Name = "Camping in Sinemorets",
                            OwnerId = "f2734046-9c38-4662-8f40-7dfd812cc952",
                            TravelTypeId = new Guid("db413e51-e7d3-4d1c-a62b-82ca270c6e72")
                        },
                        new
                        {
                            Id = new Guid("28cff7d8-794f-4cbb-9919-a1a65e852c02"),
                            CampTypeId = new Guid("d8214d0f-de2e-46f5-8810-9926cee480c0"),
                            CreatedOn = new DateTime(2023, 8, 14, 12, 54, 56, 842, DateTimeKind.Local).AddTicks(1934),
                            Description = "We are going to camp on the beach in one of the biggest camps in bulgaria.",
                            Destination = "Gradina",
                            ImgsUrl = "https://camping.bg/root/f/gallery/1/c01db28c234b15fe958af37bedb1b67c.jpg",
                            Name = "Campers and chill in Gradina",
                            OwnerId = "f2734046-9c38-4662-8f40-7dfd812cc952",
                            TravelTypeId = new Guid("7ce26a89-4c65-4da6-a3cb-9d6856cd423e")
                        },
                        new
                        {
                            Id = new Guid("c247bf48-c4d4-4dab-a008-a05889abc91b"),
                            CampTypeId = new Guid("52b6109d-cfca-418b-ba81-c795cd300aac"),
                            CreatedOn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "We are going to travel and camp from Varna to Burgas then to Sozopol, Carevo and Ahtopol",
                            Destination = "BlackSea",
                            ImgsUrl = "https://www.racq.com.au/-/media/project/racqgroup/racq/articles/rvs/2018/10/campervan-on-beach.jpg?h=667&iar=0&w=1000&rev=95fea142fe794fb0b6c98c2f8312e097&hash=E8405B2E92C7EFE24947186EEF7DE597",
                            Name = "Travel trough black sea",
                            OwnerId = "c7558577-d640-43d7-b814-0a52b9d43c4e",
                            TravelTypeId = new Guid("7ce26a89-4c65-4da6-a3cb-9d6856cd423e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Country", "Country")
                        .WithMany("Camps")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarWebApp.Data.Models.Post", "Post")
                        .WithMany("Participants")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Camp", "Camp")
                        .WithMany("Posts")
                        .HasForeignKey("CampId");

                    b.HasOne("RastafarAppData.Data.Models.CampType", "CampType")
                        .WithMany("Posts")
                        .HasForeignKey("CampTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarAppData.Data.Models.TravelType", "TravelType")
                        .WithMany("Posts")
                        .HasForeignKey("TravelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");

                    b.Navigation("CampType");

                    b.Navigation("Owner");

                    b.Navigation("TravelType");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
