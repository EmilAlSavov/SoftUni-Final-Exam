// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RastafarWebApp.Data;

#nullable disable

namespace HiparAppData.Migrations
{
    [DbContext(typeof(RastafarContext))]
    [Migration("20230814115423_RestoreData")]
    partial class RestoreData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HiparAppData.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b8b3c0aa-795a-4db5-90a0-ba4ffffb52b7",
                            AccessFailedCount = 0,
                            Age = 16,
                            ConcurrencyStamp = "da6db601-f4c1-42e7-82c3-c3bcb110785f",
                            Email = "embakks@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Emil",
                            Image = "https://z-p3-scontent.fskg1-1.fna.fbcdn.net/v/t1.15752-9/367483380_254225674190931_6660571953597606357_n.jpg?_nc_cat=108&cb=99be929b-59f725be&ccb=1-7&_nc_sid=510075&_nc_ohc=cP_4NBUNEWAAX-f4BEl&_nc_ht=z-p3-scontent.fskg1-1.fna&oh=03_AdTtHrrDehU39JJDnP0CJ3F9l2R7BiAANbI1pZok2mxZ5A&oe=65016CAA",
                            LastName = "Savov",
                            LockoutEnabled = false,
                            NormalizedEmail = "embakks@gmail.com",
                            NormalizedUserName = "CAR HIPAR",
                            PasswordHash = "AQAAAAEAACcQAAAAECLOtSyJ8qb3spNQ+wmYG50Txywk+RPlEfS2ZQUKfhwwkT1Xd8Z6E/cj51RsqPGOqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee676b50-ab78-4362-ba24-78974db16e52",
                            TwoFactorEnabled = false,
                            UserName = "Car Hipar"
                        },
                        new
                        {
                            Id = "c8a56236-db49-40f4-9914-ae02c95a929d",
                            AccessFailedCount = 0,
                            Age = 20,
                            ConcurrencyStamp = "e5e0f7aa-3e3e-4756-bb20-84608b072614",
                            Email = "testuser@gmail.com",
                            EmailConfirmed = false,
                            FistName = "Test",
                            Image = "https://scontent.xx.fbcdn.net/v/t1.15752-9/367410880_248954934732977_4076882259522423148_n.jpg?stp=dst-jpg_p180x540&_nc_cat=101&cb=99be929b-59f725be&ccb=1-7&_nc_sid=510075&_nc_ohc=7QXwtqRoJUMAX8SULHh&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.xx&oh=03_AdRDfvnD_b7noUC6HzF2v4kUmCYjtJdBnrSOKFd_j0bnJg&oe=65016737",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "testuser@gmail.com",
                            NormalizedUserName = "TESTUSER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJyPh/mV5LbwS9g29gRCE4OXsGMFa56CWNIn6yGVO5E4r+lIy44AfF3T6X8IpGoVUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56caf051-c282-4f78-bd41-871b4468b6d5",
                            TwoFactorEnabled = false,
                            UserName = "testuser@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a6c22d17-ec4a-426e-b97c-89bff216abfc",
                            ConcurrencyStamp = "6c5d9828-da28-4f2b-b5a1-35c168cde690",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b8b3c0aa-795a-4db5-90a0-ba4ffffb52b7",
                            RoleId = "a6c22d17-ec4a-426e-b97c-89bff216abfc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Camps");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0274411f-503d-45a0-9096-d3153035472e"),
                            CountryId = new Guid("a39efceb-5306-4cd9-97fb-4993780aedbd"),
                            Image = "https://camping-gradina-sozopol.booked.net/data/Photos/OriginalPhoto/8480/848032/848032307/Camping-Gradina-Hotel-Sozopol-Exterior.JPEG",
                            Name = "Gradina"
                        },
                        new
                        {
                            Id = new Guid("bc35c123-9550-4a6d-8efa-f284716b7595"),
                            CountryId = new Guid("59f6e9c2-fc5e-4568-9fb4-26a8ff2207bb"),
                            Image = "https://clubvertical.net/wp-content/uploads/2022/05/20545293_1675421585825456_6037428918988778764_o.jpg",
                            Name = "Saravari"
                        },
                        new
                        {
                            Id = new Guid("c6be1b5a-bbc1-425f-ac36-85e52f210bd5"),
                            CountryId = new Guid("3f0d8ef2-a323-4ac6-8ae9-aaa3be84c425"),
                            Image = "https://www.karavanhayati.com/wp-content/uploads/2021/03/bozcaada-karavan-kamp-alanlari-3.jpg",
                            Name = "Bozcaada"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CampTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4757ba80-5b09-402e-9c57-fe8795e35df3"),
                            Name = "Tent"
                        },
                        new
                        {
                            Id = new Guid("b0deecd4-2cf1-4434-8842-a7d7cbd8e9d2"),
                            Name = "Hammok"
                        },
                        new
                        {
                            Id = new Guid("f99189f8-055b-44ca-a962-a5958b70c06b"),
                            Name = "Caravan"
                        },
                        new
                        {
                            Id = new Guid("da0dbd21-7a62-4a62-bbfa-bb6636f6e2e8"),
                            Name = "Camper"
                        },
                        new
                        {
                            Id = new Guid("4045fe1b-dcf1-467e-85cd-01bba9b452e0"),
                            Name = "Bungalow"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a39efceb-5306-4cd9-97fb-4993780aedbd"),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = new Guid("59f6e9c2-fc5e-4568-9fb4-26a8ff2207bb"),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = new Guid("3f0d8ef2-a323-4ac6-8ae9-aaa3be84c425"),
                            Name = "Turkey"
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb9fe1c3-db99-4af3-993c-8a2dc128cbac"),
                            CreatedOn = new DateTime(2023, 8, 14, 14, 54, 22, 910, DateTimeKind.Local).AddTicks(1405),
                            Description = "Perfect Hammok for the summer and wild camping or just to put it in the yard to chill.",
                            ImgUrl = "https://www.hammockuniverse.com/cdn/shop/articles/Hammock-Universe-Blog-Featured-Image-YOUR-ULTIMATE-GUIDE-ON-HANGING-HAMMOCKS-OUTDOORS_1600x.jpg?v=1678807426",
                            Name = "Summar Hammok",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = new Guid("25a01b0d-8d9b-4c86-92ea-14fcf8fb77c5"),
                            CreatedOn = new DateTime(2023, 8, 14, 14, 54, 22, 910, DateTimeKind.Local).AddTicks(1413),
                            Description = "Perfect cup for campers. Just sit, take a sip and enjoy your trip. Perfect for all types of adventurers",
                            ImgUrl = "https://i.etsystatic.com/8120420/r/il/2b9ef1/2889698655/il_570xN.2889698655_6kgg.jpg",
                            Name = "Camping Cup",
                            Price = 15.99m
                        },
                        new
                        {
                            Id = new Guid("cc1e1745-68b5-4a3b-9a22-ffa3b9efde5a"),
                            CreatedOn = new DateTime(2023, 8, 14, 14, 54, 22, 910, DateTimeKind.Local).AddTicks(1421),
                            Description = "Pocket Ashtray for wild smokers. Dont be dirty, get one of our pocket ashtray's and leave your done cigaretes there. Save nature!!!",
                            ImgUrl = "https://i5.walmartimages.com/asr/54a3ba02-3177-4aac-82dd-a6462dfb8d6a.7ece51e52d3dffaf8c8582c0c60c327d.jpeg?odnHeight=2000&odnWidth=2000&odnBg=ffffff",
                            Name = "Pocket Ashtray",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TravelTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9d003624-0e46-4f92-8431-c17f03894cb6"),
                            Name = "None"
                        },
                        new
                        {
                            Id = new Guid("668d41d3-4fa2-43bf-8b0f-349eab33d5cb"),
                            Name = "Train"
                        },
                        new
                        {
                            Id = new Guid("1a3b5b62-1f00-4b88-ab08-44954ae42e91"),
                            Name = "Bus"
                        },
                        new
                        {
                            Id = new Guid("94d708f5-9386-4233-99ca-e7dd691c0247"),
                            Name = "Plain"
                        },
                        new
                        {
                            Id = new Guid("33f6949e-c664-45f4-a94d-d9d35d0e2ca1"),
                            Name = "Share Travel"
                        });
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PostId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("UsersPosts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CampId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CampTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgsUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TravelTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.HasIndex("CampTypeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TravelTypeId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b5fdcec7-fd69-4c70-abf8-6bbe48274ff0"),
                            CampTypeId = new Guid("4757ba80-5b09-402e-9c57-fe8795e35df3"),
                            CreatedOn = new DateTime(2023, 8, 14, 14, 54, 22, 910, DateTimeKind.Local).AddTicks(991),
                            Description = "We are going to camp in the forest next to beach Butamqta in Sinemorec",
                            Destination = "Sinemorec",
                            ImgsUrl = "https://i.pinimg.com/originals/48/65/2a/48652a144669c357866fbb75299e95ce.jpg",
                            Name = "Camping in Sinemorets",
                            OwnerId = "b8b3c0aa-795a-4db5-90a0-ba4ffffb52b7",
                            TravelTypeId = new Guid("9d003624-0e46-4f92-8431-c17f03894cb6")
                        },
                        new
                        {
                            Id = new Guid("179a7315-77b7-4abb-8272-c2b56f0ad340"),
                            CampTypeId = new Guid("f99189f8-055b-44ca-a962-a5958b70c06b"),
                            CreatedOn = new DateTime(2023, 8, 14, 14, 54, 22, 910, DateTimeKind.Local).AddTicks(1062),
                            Description = "We are going to camp on the beach in one of the biggest camps in bulgaria.",
                            Destination = "Gradina",
                            ImgsUrl = "https://camping.bg/root/f/gallery/1/c01db28c234b15fe958af37bedb1b67c.jpg",
                            Name = "Campers and chill in Gradina",
                            OwnerId = "b8b3c0aa-795a-4db5-90a0-ba4ffffb52b7",
                            TravelTypeId = new Guid("94d708f5-9386-4233-99ca-e7dd691c0247")
                        },
                        new
                        {
                            Id = new Guid("7b40ba82-c641-44f8-92c8-74489d5693a7"),
                            CampTypeId = new Guid("da0dbd21-7a62-4a62-bbfa-bb6636f6e2e8"),
                            CreatedOn = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "We are going to travel and camp from Varna to Burgas then to Sozopol, Carevo and Ahtopol",
                            Destination = "BlackSea",
                            ImgsUrl = "https://www.racq.com.au/-/media/project/racqgroup/racq/articles/rvs/2018/10/campervan-on-beach.jpg?h=667&iar=0&w=1000&rev=95fea142fe794fb0b6c98c2f8312e097&hash=E8405B2E92C7EFE24947186EEF7DE597",
                            Name = "Travel trough black sea",
                            OwnerId = "c8a56236-db49-40f4-9914-ae02c95a929d",
                            TravelTypeId = new Guid("94d708f5-9386-4233-99ca-e7dd691c0247")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Country", "Country")
                        .WithMany("Camps")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.IdentityUserPosts", b =>
                {
                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarWebApp.Data.Models.Post", "Post")
                        .WithMany("Participants")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.HasOne("RastafarAppData.Data.Models.Camp", "Camp")
                        .WithMany("Posts")
                        .HasForeignKey("CampId");

                    b.HasOne("RastafarAppData.Data.Models.CampType", "CampType")
                        .WithMany("Posts")
                        .HasForeignKey("CampTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiparAppData.Data.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RastafarAppData.Data.Models.TravelType", "TravelType")
                        .WithMany("Posts")
                        .HasForeignKey("TravelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");

                    b.Navigation("CampType");

                    b.Navigation("Owner");

                    b.Navigation("TravelType");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Camp", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.CampType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.Country", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("RastafarAppData.Data.Models.TravelType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("RastafarWebApp.Data.Models.Post", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
